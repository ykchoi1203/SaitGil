/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/8.5.43
 * Generated at: 2019-08-09 08:04:29 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp.views.member;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;

public final class searchResult_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.HashSet<>();
    _jspx_imports_packages.add("javax.servlet");
    _jspx_imports_packages.add("javax.servlet.http");
    _jspx_imports_packages.add("javax.servlet.jsp");
    _jspx_imports_classes = null;
  }

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
      throws java.io.IOException, javax.servlet.ServletException {

    final java.lang.String _jspx_method = request.getMethod();
    if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method) && !javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSPs only permit GET POST or HEAD");
      return;
    }

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html; charset=UTF-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write('\r');
      out.write('\n');
 

	String userId = (String)session.getAttribute("userId");
	String user = "존재하지 않습니다.";

	if(userId != "null") { 
		user = userId.substring(0, userId.length()-2);  		
		user = user + "**";
	} 


      out.write("\r\n");
      out.write("<!DOCTYPE html PUBLIC \"-//W3C//DTD HTML 4.01 Transitional//EN\" \"http://www.w3.org/TR/html4/loose.dtd\">\r\n");
      out.write("<html>\r\n");
      out.write("<head>\r\n");
      out.write("<meta http-equiv=\"Content-Type\" content=\"text/html; charset=UTF-8\">\r\n");
      out.write("<title>Insert title here</title>\r\n");
      out.write("<link href=\"https://fonts.googleapis.com/css?family=Noto+Serif+KR&display=swap\" rel=\"stylesheet\">\r\n");
      out.write("\r\n");
      out.write("<style>\r\n");
      out.write("\tbody {\r\n");
      out.write("\t\twidth:200px;\r\n");
      out.write("\t\theight:100px;\r\n");
      out.write("\t\tbackground:#f7aec5;\r\n");
      out.write("\t\tmargin:0;\r\n");
      out.write("\t\t\r\n");
      out.write("\t\t }\r\n");
      out.write("\r\n");
      out.write("\t#main {\r\n");
      out.write("\t\tmargin-top:20px;\r\n");
      out.write("\t\twidth:510px;\r\n");
      out.write("\t\theight:250px;\r\n");
      out.write("\t\tbackground:white;\r\n");
      out.write("\t\ttext-align:center;\r\n");
      out.write("\t}\r\n");
      out.write("\t\r\n");
      out.write("\t#header {\r\n");
      out.write("\t\tfont-size:30px;\r\n");
      out.write("\t\tfont-weight:900;\r\n");
      out.write("\t\tcolor:#e23a6e ;\r\n");
      out.write("\t\tfont-family: 'Noto Serif KR', serif;\r\n");
      out.write("\t\tpadding: 25px;\r\n");
      out.write("\t\t\r\n");
      out.write("\t}\r\n");
      out.write("\t\r\n");
      out.write("\t#textArea {\r\n");
      out.write("\t\tfont-size:15px;\r\n");
      out.write("\t\tcolor:black ;\r\n");
      out.write("\t\tfont-family: 'Noto Serif KR', serif;\r\n");
      out.write("\t\tmargin-top:15px;\r\n");
      out.write("\t}\r\n");
      out.write("\t\r\n");
      out.write("\t#button {\r\n");
      out.write("\t\twidth:80px;\r\n");
      out.write("\t\theight:30px;\r\n");
      out.write("\t\tborder-radius: 5%;\r\n");
      out.write("\t\tbackground:#f7aec5 ;\r\n");
      out.write("\t\tcolor:white;\r\n");
      out.write("\t\tfont-size:13px;\r\n");
      out.write("\t\tfont-family: 'Noto Serif KR', serif;\r\n");
      out.write("\t\tmargin:auto;\r\n");
      out.write("\t\tmargin-top:30px;\r\n");
      out.write("\t\tline-height: 25px;\r\n");
      out.write("\t\t\r\n");
      out.write("\t}\r\n");
      out.write("\t\r\n");
      out.write("\t#button:hover {\r\n");
      out.write("\t\tcursor:pointer;\r\n");
      out.write("\t\tbackground:#e23a6e ;\r\n");
      out.write("\t}\r\n");
      out.write("\t\r\n");
      out.write("\tspan {\r\n");
      out.write("\t\tfont-weight:900;\r\n");
      out.write("\t\tcolor:#e23a6e;\r\n");
      out.write("\t}\r\n");
      out.write("</style>\r\n");
      out.write("</head>\r\n");
      out.write("<body>\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\t<div id=\"main\">\r\n");
      out.write("\t\t<div id=\"header\">너와 나의 사잇길</div>\r\n");
      out.write("\t\t");
  
      out.write("\r\n");
      out.write("\t\t<div id=\"textArea\">\r\n");
      out.write("\t\t\t회원님의 아이디는 <span>");
      out.print( user );
      out.write("</span> 입니다. <br>\r\n");
      out.write("\t\t\t메인 페이지로 이동해 로그인을 해주세요. \r\n");
      out.write("\t\t\t<div id=button onclick=\"goMain();\">확인</div>\r\n");
      out.write("\t\t</div>\r\n");
      out.write("\t</div>\r\n");
      out.write("\t\r\n");
      out.write("\t<script>\r\n");
      out.write("\t\tfunction goMain() {\r\n");
      out.write("\t\t\t\r\n");
      out.write("\t\t\t");
request.getSession().invalidate();
      out.write("\r\n");
      out.write("\t\t\twindow.close();\r\n");
      out.write("\t\t\t\r\n");
      out.write("\t\t}\r\n");
      out.write("\t</script>\r\n");
      out.write("\r\n");
      out.write("</body>\r\n");
      out.write("</html>");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
